{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\derek\\\\Documents\\\\projects\\\\efficient-frontier\\\\client\\\\src\\\\components\\\\dataset.component.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Chart from 'chart.js';\n\nconst Dataset = props => {\n  _s();\n\n  const [feasibleSet, setFeasibleSet] = useState([]);\n  const [myChart, setMyChart] = useState();\n  const data = {\n    labels: ['Scatter'],\n    datasets: [{\n      label: 'My First dataset',\n      fill: false,\n      backgroundColor: 'rgba(75,192,192,0.4)',\n      pointBorderColor: 'rgba(75,192,192,1)',\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 1,\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      pointHoverBorderWidth: 1,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: feasibleSet\n    }]\n  };\n  const options = {\n    tooltips: {\n      position: 'nearest',\n      callbacks: {\n        afterTitle: tooltipItem => {\n          let holdings = [...feasibleSet[tooltipItem[0].index].holdings];\n\n          for (let i = 0; i < holdings.length; i++) {\n            let assetClass = props.assets[i].assetClass;\n            let multiplier = 100;\n            holdings[i] = assetClass + ': ' + Math.round(holdings[i] * multiplier * multiplier) / multiplier + '%';\n          }\n\n          return holdings;\n        },\n        label: () => {}\n      }\n    }\n  };\n  var params = {\n    type: 'scatter',\n    data: data,\n    options: options\n  };\n  useEffect(() => {\n    fetch('http://localhost:5000/portfolio', {\n      method: 'post',\n      body: JSON.stringify({\n        assets: props.assets\n      }),\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(res => setFeasibleSet(res));\n  }, [props.assets]);\n  useEffect(() => {\n    if (myChart) {\n      myChart.destroy();\n    }\n\n    let ctx = document.getElementById('myChart');\n    setMyChart(new Chart(ctx, params));\n  }, [feasibleSet]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"canvas\",\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"myChart\",\n      width: \"400\",\n      height: \"200\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Dataset, \"uoGPzuWILUMgaggwD4NQYUOm+Ko=\");\n\n_c = Dataset;\nexport default Dataset;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dataset\");","map":{"version":3,"sources":["C:/Users/derek/Documents/projects/efficient-frontier/client/src/components/dataset.component.js"],"names":["React","useState","useEffect","Chart","Dataset","props","feasibleSet","setFeasibleSet","myChart","setMyChart","data","labels","datasets","label","fill","backgroundColor","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","options","tooltips","position","callbacks","afterTitle","tooltipItem","holdings","index","i","length","assetClass","assets","multiplier","Math","round","params","type","fetch","method","body","JSON","stringify","headers","then","res","json","destroy","ctx","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport Chart from 'chart.js'\r\n\r\nconst Dataset = (props) => {\r\n\r\n    const [feasibleSet, setFeasibleSet] = useState([])\r\n    const [myChart, setMyChart] = useState()\r\n\r\n    const data = {\r\n      labels: ['Scatter'],\r\n      datasets: [\r\n        {\r\n          label: 'My First dataset',\r\n          fill: false,\r\n          backgroundColor: 'rgba(75,192,192,0.4)',\r\n          pointBorderColor: 'rgba(75,192,192,1)',\r\n          pointBackgroundColor: '#fff',\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 1,\r\n          pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          pointHoverBorderWidth: 1,\r\n          pointRadius: 1,\r\n          pointHitRadius: 10,\r\n          data: feasibleSet\r\n        }\r\n      ]\r\n    }\r\n    \r\n    const options = {\r\n      tooltips: {\r\n        position: 'nearest',\r\n        callbacks: {\r\n          afterTitle: (tooltipItem) => {\r\n              let holdings = [...feasibleSet[tooltipItem[0].index].holdings]\r\n              for (let i = 0; i < holdings.length; i++) {\r\n                let assetClass = props.assets[i].assetClass\r\n                let multiplier = 100\r\n                holdings[i] = assetClass + ': ' + (Math.round((holdings[i]*multiplier) * multiplier) / multiplier) + '%'\r\n              }\r\n              return holdings\r\n          },\r\n          label: () => {}\r\n        }\r\n      }\r\n    }\r\n    var params = {\r\n      type: 'scatter',\r\n      data: data,\r\n      options: options\r\n    }\r\n\r\n    useEffect(() => {\r\n      fetch('http://localhost:5000/portfolio', {\r\n        method: 'post',\r\n        body: JSON.stringify({\r\n          assets: props.assets\r\n        }),\r\n        headers: { \"Content-type\": \"application/json\" }\r\n      })\r\n        .then(res => res.json())\r\n        .then(res => setFeasibleSet(res))\r\n    }, [props.assets])\r\n\r\n    useEffect(() => {\r\n      if (myChart) {myChart.destroy()}\r\n      let ctx = document.getElementById('myChart')     \r\n      setMyChart(new Chart(ctx, params))\r\n    }, [feasibleSet])\r\n\r\n    return (\r\n      <div id=\"canvas\" className=\"container\">\r\n          <canvas id='myChart' width=\"400\" height=\"200\"></canvas>\r\n      </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Dataset"]},"metadata":{},"sourceType":"module"}